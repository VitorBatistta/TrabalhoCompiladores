lexer grammar CompiladorJava;

PRIVATE: 'private';
PROTECTED: 'protected';
PUBLIC: 'public';
ABSTRACT:'abstract';
CLASS: 'class';
EXTENDS: 'extends';
FINAL: 'final';
IMPLEMENTS: 'implements';
INTERFACE: 'interface';
NATIVE: 'native';
NEW: 'new';
STATIC: 'static';
SYNCHRONIZED: 'synchronized';
TRANSIENT: 'transient';
VOLATILE: 'volatile';
BREAK: 'break';
CASE: 'case';
CONTINUE: 'continue';
DEFAULT: 'default';
DO: 'do';
ELSE: 'else';
FOR: 'for';
IF: 'if';
INSTANCEOF: 'instanceof';
RETURN: 'return';
SWITCH: 'switch';
WHILE: 'while';
CATCH: 'carch';
FINALLY: 'finally';
THROW: 'throw';
THROWS: 'throws';
TRY: 'try';
IMPORT: 'import';
PACKAGE: 'package';
BOOLEAN: 'boolean';
BYTE: 'byte';
CHAR: 'char';
DOUBLE: 'double';
FLOAT: 'float';
INT: 'int';
LONG: 'long';
SHORT: 'short';
SUPER: 'super';
VOID: 'void';
CONST: 'const';
GOTO: 'goto';
TRUE: 'true';
FALSE: 'false';
NULL: 'null';

ID: (('a'..'z') | ('A'..'Z') | '_' | '$') (('a'..'z') | ('A'..'Z') | ('0'..'9') | '_' | '$')*;

ADICAO: '+';
SUBITRACAO: '-';
MULTIPLICACAO: '*';
DIVISAO: '/';
RESTO: '%';
IGUALDADE: '==';
DIFERENÃ‡A: '!=';
MAIOR: '>';
MENOR: '<';
MaiorIgual: '>=';
MenorIgual: '<=';
AND: '&&';
OR: '||';
MultiAtribuicao : '*=';
DivAtribuicao : '/=';
RestoAtribuicao : '%=';
SomaAtribuicao : '+=';
SubAtribuicao : '-=';
ANDAtribuicao : '&=';
XORAtribuicao : '^=';
ORAtribuicao : '|=';
Incremento : '++';
Decremento : '--';
AP: '(';
FP: ')';
AbreChave: '{';
FechaChave: '}';
AC: '[';
FC: ']';
Ponto: '.';
Virgula: ',';
PontVirgula: ';';
DoisPonto: ':';
Interrogacao: '?';

DIGITOS: '0'|'1'|'2'|'3'|'4'|'5'|'6'|'7'|'8'|'9';
